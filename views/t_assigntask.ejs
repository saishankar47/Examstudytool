<!DOCTYPE html>
<html lang="en">
  <%- include('t_head') %>
  <body>
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <link href="https://cdn.datatables.net/v/dt/dt-1.13.4/b-2.3.6/sp-2.1.2/sl-1.6.2/datatables.min.css" rel="stylesheet"/>
    <script src="https://cdn.datatables.net/v/dt/dt-1.13.4/b-2.3.6/sp-2.1.2/sl-1.6.2/datatables.min.js"></script>
    <link href="/css/s_learning_archive.css" rel="stylesheet">

    <script src="https://cdn.tiny.cloud/1/57hyg5tgxtqqoxud9ulbtbpq7eba8ada4uz6zbt49e89bo44/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
  
    <script type="text/javascript" src="/js/plugin.min.js"></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <!-- <script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full"></script> -->




    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML"></script> MathJAX -->
    <style>
            body{
              background-image: linear-gradient(45deg, #93a5cf 0%, #e4efe9 100%);  
            }
            div .HiddenText {
                display: none;
                -webkit-font-smoothing: antialiased;
            }
            div .HiddenText1 {
                display: none;
                -webkit-font-smoothing: antialiased;
            }
            div .DivForHoverItem:hover .HiddenText {
                display:block;
            }
            div .DivForHoverItem:hover .HiddenText1 {
                display:block;
            }
            div .DivForHoverItem:hover .initialTextData {
                display: none;
            }
            #hidden{
                background-color: rgb(255, 255, 255);
                width: 200px;
                height: 65px;
                /* border: 1px solid black; */
                overflow: hidden;
              }
              .input-error {
                border-color: red;
              }
    </style>  
 
 <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML"></script> 
   <script>
    let results = [];
    $(document).ready(function () {
      MathJax.Hub.Config({
               tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
            });
            MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
            $('previewq').DataTable({
                        'order': [[0, 'asc']],
            });
      });

      
   </script>
  
   <script>

      $(document).ready(function () {
        
        let table2 = $('#assigntask2').DataTable({
          
                  'order': [[0, 'asc']],  
                  columnDefs: [
                    { width: 400, targets: 1 },
                    { width: 100, targets: 2 },
                    { width: 250, targets: 3 },
                    { width: 250, targets: 4 }
                ],
                'drawCallback': function( settings ) {
                      //  MathJax.Hub.Config({
                      //     tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
                      //  });
              
                      MathJax.Hub.Queue(["Typeset",MathJax.Hub]); 
                  }
    
            });

        let table = $('#assigntask').DataTable({
            language: {
                      searchPanes: {
                          clearMessage: 'Obliterate Selections',
                          collapse: {0: 'Filters', _: 'Filters (%d)'}
                              }
                    },   
             buttons: [{ 
                    extend: 'searchPanes',
                    className: 'buttons-searchPanes',
                              config: {
                              cascadePanes: true,
                              }
                  }],
              columnDefs: [{ 
                          searchPanes: {
                            show: true
                            },
                            targets: [2,3,4]
                        },
                        { width: 400, targets: 1 },
                        { width: 100, targets: 2 },
                        { width: 250, targets: 3 },
                        { width: 250, targets: 4 }
                      ],
                dom: 'Bftrip',
              'order': [[0, 'asc']],  
                          'drawCallback': function( settings ) {
        //  MathJax.Hub.Config({
        //     tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
        //  });
 
         MathJax.Hub.Queue(["Typeset",MathJax.Hub]); 
     }
              
          });

          $('#assigntask tbody').on('click', 'tr', function () {
                  $(this).toggleClass('selected');
                  let rows = table.rows('.selected').data();
                  table2.destroy();
                  table2 = $('#assigntask2').DataTable({
                       'order': [[0, 'asc']],
                       'drawCallback': function( settings ) {
                      //  MathJax.Hub.Config({
                      //     tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
                      //  });
              
                      MathJax.Hub.Queue(["Typeset",MathJax.Hub]); 
                  }   
                  });
            table2.clear().draw();
            for(let ind = 0; ind<rows.length; ind+=1){
              table2.row.add(rows[ind]).draw(); 
            }
          });
          //  Assign button   
          const assignBtn = document.querySelector('#assign-button');

          assignBtn.addEventListener('click', () => {
                let rows = table.rows('.selected').data();  
                let questionIds = [];
                rows.each(function(rowData) {
                  const questionId = rowData[0];
                    if (!questionIds.includes(questionId)) {
                      questionIds.push(questionId);
                    }
                });
                const assignmentName = document.getElementById("assignment-name").value;
                const coursevalue = document.getElementById("course-value").value;
                const dueDate = document.getElementById("due-date").value;
                const isTimed = document.getElementById("timed-assignment").checked;
                const timer = isTimed ? document.getElementById("countdown-time").value : null;
                if (!assignmentName || !coursevalue || !dueDate || (isTimed && !timer)) {
                        let errorMessage = "Please provide the following details: ";
                        if (!assignmentName) {
                          errorMessage += "assignment name, ";
                          document.getElementById("assignment-name").classList.add("input-error");
                          document.getElementById("assignment-name").focus();
                        } else {
                          document.getElementById("assignment-name").classList.remove("input-error");
                        }
                        if (!coursevalue) {
                          errorMessage += "course value, ";
                          if (!document.activeElement || document.activeElement.tagName.toLowerCase() != 'input') {
                            document.getElementById("course-value").classList.add("input-error");
                            document.getElementById("course-value").focus();
                          }
                        } else {
                          document.getElementById("course-value").classList.remove("input-error");
                        }
                        if (!dueDate) {
                          errorMessage += "due date, ";
                          if (!document.activeElement || document.activeElement.tagName.toLowerCase() != 'input') {
                            document.getElementById("due-date").classList.add("input-error");
                            document.getElementById("due-date").focus();
                          }
                        } else {
                          document.getElementById("due-date").classList.remove("input-error");
                        }
                        if (isTimed && !timer) {
                          errorMessage += "timer value, ";
                          if (!document.activeElement || document.activeElement.tagName.toLowerCase() != 'input') {
                            document.getElementById("countdown-time").classList.add("input-error");
                            document.getElementById("countdown-time").focus();
                          }
                        } else {
                          document.getElementById("countdown-time").classList.remove("input-error");
                        }
                        errorMessage = errorMessage.slice(0, -2) + "."; // remove last ", " and add a "."
                        alert(errorMessage);
                        return;
                  }
                let class_id = `<%-class_id%>`
                let class_name=`<%-class_name%>`
               
                const data = { questionIds,assignmentName,dueDate,class_id,isTimed,timer,coursevalue};
                
                if(questionIds.length!=0 )
                {
                  console.log(data);
                  fetch('/teacher/assigntask', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(data)
                })
                .then(response => {
                    // handle response from server
                    if (response.ok) {
                      
                    } else {
                      throw new Error('Network response was not ok.');
                    }
                  })
                  .then(data => {
                    // redirect to the next route
                    window.location.href = `/teacher`;
                  })
                  .catch(error => {
                    // handle error
                  });
                }
               
              });

 //Assign button
 let previewModal;

       const preview1 = document.querySelector('#preview-button1');

       preview1.addEventListener('click', () => {
  let rows = table.rows('.selected').data();
  let questionIds = [];
  rows.each(function(rowData) {
    const questionId = rowData[0];
    if (!questionIds.includes(questionId)) {
      questionIds.push(questionId);
    }
  });
  let class_id = `<%-class_id%>`;
  const data = { questionIds, class_id };
  console.log(data);
  if (questionIds.length != 0) {
    fetch('/teacher/assigntask2/preview', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        const questionContainer = document.getElementById('question-container1');
        questionContainer.innerHTML = '';
        data.forEach((question) => {
          const questionElement = document.createElement('div');
          questionElement.className = 'question-item';
          questionElement.innerHTML = `
            <div class="row">
              <div class="col border-end">
                <div class="row" style="padding: 10px;">
                  <p class="fw-bold" id="newline">
                    ${question.question}
                    <div>
                      <img src="${question.question_url}" class="img-fluid" alt="">
                    </div>
                  </p>
                  <div>
                    <input type="radio">
                    <input type="radio">
                    <input type="radio">
                    <input type="radio">
                    <label for="one" class="box first">
                      <div class="course">
                        <span class="circle"></span>
                        <span class="subject">A. ${question.option_1}</span>
                      </div>
                    </label>
                    <label for="two" class="box second">
                      <div class="course">
                        <span class="circle"></span>
                        <span class="subject">B. ${question.option_2}</span>
                      </div>
                    </label>
                    <label for="three" class="box third">
                      <div class="course">
                        <span class="circle"></span>
                        <span class="subject">C. ${question.option_3}</span>
                      </div>
                    </label>
                    <label for="four" class="box forth">
                      <div class="course">
                        <span class="circle"></span>
                        <span class="subject">D. ${question.option_4}</span>
                      </div>
                    </label>
                  </div>
                </div>
              </div>
            </div>
          `;
          questionContainer.appendChild(questionElement);
        });

        // Add MathJax script
        const mathJaxScript = document.createElement('script');
        mathJaxScript.type = 'text/javascript';
        mathJaxScript.text = `
          MathJax.Hub.Config({
            tex2jax: {
              inlineMath: [['$','$'], ['\\(','\\)']]
            },
            "HTML-CSS": { linebreaks: { automatic: true } },
            SVG: { linebreaks: { automatic: true } }
          });
          MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
        `;
        questionContainer.appendChild(mathJaxScript);
      })
      .catch((error) => {
        // handle error
      });
  }
});

                 
            document.querySelector('.btn-close').addEventListener('click', () => {
              if (previewModal) {
                previewModal.hide();
              }
            });
            document.getElementById('close-modal-btn').addEventListener('click', () => {
              if (previewModal) {
                previewModal.hide();
              }
              
            });

});
</script>
  <script>
    $(document).ready(function() {
      // Add event listener to checkbox
      $('#timed-assignment').change(function() {
        if ($(this).is(':checked')) {
          // Show countdown timer input field
          $('#due-date').prop('required', false);
          $('#due-date').show();
          $('#countdown-timer').show();
          $('#countdown-time').prop('required', true);
        } else {
          // Show due date input field
          $('#due-date').prop('required', true);
          $('#due-date').show();
          $('#countdown-timer').hide();
          $('#countdown-time').prop('required', false);
        }
      });
    });
</script>
<!-- <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [['$','$'], ['\\(','\\)']]
    },
    "HTML-CSS": { linebreaks: { automatic: true } },
    SVG: { linebreaks: { automatic: true } }
  });
</script> -->

    <header>
        <nav class="navbar navbar-expand-md navbar-light fixed-top bg-light">
            <div class="container-fluid">
                <a class="navbar-brand" href="/teacher">Exam Study Tool</a>

                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" style="border-left: 1px solid darkgray; " id="navbarCollapse">
                    <ul class="navbar-nav me-auto mb-2 mb-sm-0">
                        <li class="nav-item active">
                            <a class="nav-link " style="padding-left: 15px; color: blue;" aria-current="page" href="/teacher">Class</a>
                        </li>
                        <li class="nav-item">
                          <a class="nav-link " style="padding-left: 15px;" aria-current="page" href="/teacher/questions">Questions</a>
                      </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/teacher/status" >Status</a>
                        </li>
                    </ul>
                </div>
                <div class="collapse navbar-collapse" id="navbarCollapse">
                    <ul class="navbar-nav ms-auto">
                      <li class="nav-item">
                        <a class="nav-link" aria-current="page" href="/teacher/profile"><i
                                style="padding-right: 4px;" class="fa fa-user"></i><%= user.user_name %></a>
                    </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/">LOGOUT</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <br>
    </header>
    <!-- header -->
    <div class="container-xl">
      <div class="row">
        <div class="col shadow p-4 mb-5 bg-white rounded">
          <div class="row">
            <div class="col">
             
              <a href="/teacher" >  <button class="btn btn-dark"; type="button" >
                <i class="fa fa-arrow-left"> </i>
              </button>
              </a>
           </div>

            <div class="col-12"><h4 style="text-align: center;">Assign Assignment to <%-JSON.stringify(class_name.class_name) %></h4></div>
          </div>
          
          <div class="row">
            <div class="col-5">
              <div class="input-group mb-3">
                <label for="assignment-name" class="input-group-text"> Assignment Name: <span class="text-danger">*</span></label>
                <input type="text" id="assignment-name" class="form-control" aria-label="Assignment Name" placeholder="Assignment Name" required>
                <div class="invalid-feedback">
                  Please enter an assignment name.
                </div>
              </div>
            </div>
            <div class="col-3">
              <div class="input-group mb-3">
                <label for="course-value" class="input-group-text"><span class="text-danger">*</span> Course:</label>
                <select id="course-value" class="form-select" aria-label="Course Name" required>
                  <option value="" selected disabled>Select a course value</option>

                    <% for (let i=0; i < data1.length; i++){ %>
                
                  <option value="<%= data1[i].course %>"><%= data1[i].course %></option>
            
                <% } %>
                </select>
                <div class="invalid-feedback">
                  Please select an assignment name.
                </div>
              </div>
            </div>
            
            <div class="col">
              <div class="input-group ">
                <label for="due-date" class="input-group-text"> Due Date:<span class="text-danger">*</span></label>
                <input type="datetime-local" class="form-control" id="due-date" name="due-date"  required min="<%= new Date().toISOString().slice(0, 16) %>">
                <div class="invalid-feedback">
                  Please enter a due date.
                </div>
              </div>
            </div>
          </div>
          <div class="row mt-3">
            <div class="col-6">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="timed-assignment" value="1">
                <label class="form-check-label" for="timed-assignment">
                  Timed Assignment
                </label>
              </div>
            </div>
            <div class="col">
              <div class="input-group" style="display: none;" id="countdown-timer">
                <label for="countdown-time" class="input-group-text"><span class="text-danger">*</span> Countdown Timer:</label>
                <input type="text" class="form-control" id="countdown-time" name="countdown-time" placeholder="hh:mm:ss" required>
                <div class="invalid-feedback">
                  Please enter a valid countdown time (hh:mm:ss).
                </div>
              </div>
            </div>
          </div>

          <style>
            hr.dotted {
              border-top: 3px dotted #bbb;
            }
          </style>  
          <hr class="dotted"> 
          <br><br>
          <div class="row" >
            <h5 style="padding: 0%;"><small>Questions to be selected</small> </h5>
            <div class="col-sm">
            
              <div class="row" style="background-color:aliceblue">
                <div class="col-sm">
                  
                  <table class="display compact cell-border" id="assigntask" style="font-size: small;">
                    <thead>
                      <tr>
                       
                        <th ></th>
                        <th scope="col">Question</th>
                        <th scope="col">Course</th>
                        <th scope="col">Topic</th>
                        <th scope="col">Sub-Topic</th>
                        <th scope="col">Month</th>
                        <th scope="col">Year</th>
                        <!-- <th scope="col">Standard</th>
                        <th scope="col">Difficulty</th> -->
                      </tr>
                    </thead>
                    
                    <tbody>
                      <% for (let i=0; i < data0.length; i++){ %>
                      <tr class="text-capitalize">
                        <td ><%- data0[i].question_id %></td>
                       
                        <td>
                          <% if(data0[i].question.length>350) {%>
                          <% if(data0[i].question.includes("<math")){%>
                              <%-data0[i].question.replace(/^<p>|<\/p>$/g, '').replace(/<\/?math[^>]*>/g, '').slice(0,50)  %>
                          <% }else{ %>
                              <%- data0[i].question.slice(0,350)  %>
                              <% }}else{ %>
                                  <%- data0[i].question  %>
                                  <% } %>
                            <%if(data0[i].question_url!=null){%>
                              <img src="<%=data0[i].question_url%>">
                              <%}%>
                      </td> 
                        <td><%= data0[i].course %></td>

                        <td><%= data0[i].topic %></td>
                        <td><%= data0[i].sub_topic %></td>
                        <td><%= data0[i].month %></td>
                        <td><%= data0[i].year %></td>
                        <!-- <td><%= data0[i].standard %></td>
                        <td><%= data0[i].difficulty %></td> -->
                      </tr>
                      <% } %>
                    </tbody>
                 
                  </table>
                </div>
                
              </div>
            </div>
       
          </div>

        <!-- container -->
       
        <style>
          hr.dotted {
            border-top: 3px dotted #bbb;
          }
      </style>  
      <hr class="dotted"> 
     
      
          <div class="row">
            <div class="col">
              <table class="display  cell-border" id="assigntask2" style="font-size: small;" >
                <thead>
                  <tr>
                    <th ></th>
                    <th scope="col">Question</th>
                    <th scope="col">Course</th>
                    <th scope="col">Topic</th>
                    <th scope="col">Sub-Topic</th>
                    <th scope="col">Month</th>
                    <th scope="col">Year</th>
                  </tr>
                </thead>
                <tbody>
                  
                </tbody>
              </table>
            </div>
            
          </div>
       
        <br>
        <div class="row">
        <div class="col-4"></div><div class="col-4 center">

          
            <div class="btn-group " role="group" aria-label="First group">
              <a href="/teacher" > <button type="button" class="btn btn-primary">Cancel</button></a>
              
            </div>
            
            <div class="btn-group" role="group" aria-label="Third group">
              <button id="preview-button1" type="button"   class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop1">Preview Assignment</button>
            </div>
            
            <div class="btn-group" role="group" aria-label="Third group">
              <button type="button" id="assign-button" class="btn btn-primary">Assign</button>
            </div>
 
        </div><div class="col-4"></div>
        </div>
  
</div>
</div>



    </div>
     
<!-- modal -->
<div class="modal fade" id="staticBackdrop1" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Preview Questions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
            <div id="question-container1">
            </div>
      </div>
      <div class="modal-footer">
        <button type="button" data-bs-dismiss="modal" id="close-modal-btn" class="btn btn-secondary" >Close</button>
      </div>
    </div>

  </div>
</div>
<!-- modal -->



<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
  


<div style="flex-grow:1"></div>
<%- include('t_footer.ejs') %>
  </body>

 

  </html>